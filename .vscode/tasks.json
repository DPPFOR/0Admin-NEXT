{
  "$schema": "https://raw.githubusercontent.com/microsoft/vscode/master/src/vs/workbench/contrib/tasks/common/tasks.schema.json",
  "version": "2.0.0",
  "tasks": [
    {
      "label": "MCP Contracts validieren",
      "type": "process",
      "command": "python",
      "args": ["tools/mcp/validate_contracts.py"],
      "problemMatcher": "$python",
      "group": "build"
    },
    {
      "label": "MCP Validate (all)",
      "type": "process",
      "command": "python",
      "args": ["tools/mcp/validate_contracts.py"],
      "problemMatcher": "$python",
      "group": "build"
    },
    {
      "label": "MCP Smokes ausführen",
      "type": "process",
      "command": "pytest",
      "options": {
        "env": {"PYTEST_DISABLE_PLUGIN_AUTOLOAD": "1"}
      },
      "args": ["-q", "backend/mcp/tests/smoke"],
      "problemMatcher": "$pytest",
      "group": "test"
    },
    {
      "label": "MCP Smokes (all)",
      "type": "process",
      "command": "pytest",
      "options": {"env": {"PYTEST_DISABLE_PLUGIN_AUTOLOAD": "1"}},
      "args": ["-q", "backend/mcp/tests/smoke"],
      "problemMatcher": "$pytest",
      "group": "test"
    },
    {
      "label": "MCP Tools (tree)",
      "type": "process",
      "command": "python",
      "args": ["tools/mcp/list_tools.py", "--tree"],
      "problemMatcher": "$python"
    },
    {
      "label": "Inbox → MCP Shadow Analysis (sample)",
      "type": "process",
      "command": "python",
      "args": [
        "tools/flows/run_inbox_shadow_for_last_validated.py",
        "--tenant",
        "00000000-0000-0000-0000-000000000001"
      ],
      "problemMatcher": "$python"
    },
    {
      "label": "Inbox Local Flow (sample)",
      "type": "process",
      "command": "python",
      "args": [
        "tools/flows/run_inbox_local_flow.py",
        "--tenant",
        "00000000-0000-0000-0000-000000000001",
        "--path",
        "artifacts/inbox/samples/pdf/sample_a.pdf"
      ],
      "problemMatcher": "$python"
    },
    {
      "label": "Validate DTO Mapping",
      "type": "process",
      "command": "pytest",
      "options": {"env": {"PYTEST_DISABLE_PLUGIN_AUTOLOAD": "1"}},
      "args": ["-q", "tests/inbox/test_report_to_dto_shape.py"],
      "problemMatcher": "$pytest",
      "group": "test"
    },
    {
      "label": "MCP Playwright: Install Chromium",
      "type": "process",
      "command": "python",
      "args": ["-m", "playwright", "install", "chromium"],
      "problemMatcher": []
    },
    {
      "label": "MCP Playwright: Install All",
      "type": "process",
      "command": "python",
      "args": ["-m", "playwright", "install"],
      "problemMatcher": []
    },
    {
      "label": "Importer: from artifact (sample)",
      "type": "process",
      "command": "python",
      "args": [
        "tools/flows/run_importer_from_artifact.py",
        "--tenant",
        "00000000-0000-0000-0000-000000000001",
        "--artifact",
        "artifacts/inbox_local/samples/sample_result.json",
        "--dry-run"
      ],
      "problemMatcher": "$python"
    },
    {
      "label": "Tests: importer",
      "type": "process",
      "command": "pytest",
      "options": {"env": {"PYTEST_DISABLE_PLUGIN_AUTOLOAD": "1"}},
      "args": ["-q", "tests/inbox/test_importer_*"]
    },
    {
      "label": "Importer: consume outbox (1)",
      "type": "process",
      "command": "python",
      "args": ["tools/flows/run_importer_consume_outbox.py"],
      "problemMatcher": "$python"
    },
    {
      "label": "DB: apply migration (local)",
      "type": "process",
      "command": "bash",
      "args": ["-lc", "psql \"$INBOX_DB_URL\" -f ops/alembic/versions/20251019_inbox_parsed.sql"],
      "problemMatcher": []
    },
    {
      "label": "DB: upgrade (read model)",
      "type": "process",
      "command": "python",
      "args": ["-m", "alembic", "-c", "alembic.ini", "upgrade", "head"],
      "problemMatcher": []
    },
    {
      "label": "ReadModel: query invoices (sample)",
      "type": "process",
      "command": "python",
      "args": [
        "tools/flows/query_read_model.py",
        "--tenant",
        "00000000-0000-0000-0000-000000000001",
        "--what",
        "invoices",
        "--limit",
        "5",
        "--json"
      ],
      "problemMatcher": "$python"
    },
    {
      "label": "ReadModel: query review (sample)",
      "type": "process",
      "command": "python",
      "args": [
        "tools/flows/query_read_model.py",
        "--tenant",
        "00000000-0000-0000-0000-000000000001",
        "--what",
        "review",
        "--json"
      ],
      "problemMatcher": "$python"
    },
    {
      "label": "ReadModel: summary (sample)",
      "type": "process",
      "command": "python",
      "args": [
        "tools/flows/query_read_model.py",
        "--tenant",
        "00000000-0000-0000-0000-000000000001",
        "--what",
        "summary",
        "--json"
      ],
      "problemMatcher": "$python"
    },
    {
      "label": "Run Read API (uvicorn dev)",
      "type": "process",
      "command": "uvicorn",
      "args": ["backend.app:app", "--reload"],
      "problemMatcher": "$python"
    },
    {
      "label": "API Smokes: read-model",
      "type": "process",
      "command": "pytest",
      "options": {"env": {"PYTEST_DISABLE_PLUGIN_AUTOLOAD": "1", "RUN_DB_TESTS": "1"}},
      "args": ["-q", "tests/inbox/test_read_api_shape.py"],
      "problemMatcher": "$pytest",
      "group": "test"
    },
    {
      "label": "Flock Samples (local)",
      "type": "process",
      "command": "python",
      "args": [
        "tools/flows/flock_samples.py",
        "--tenant",
        "00000000-0000-0000-0000-000000000001",
        "--base-url",
        "http://localhost:8000"
      ],
      "problemMatcher": "$python"
    }
  ]
}
